diff --git a/npm-publish.js b/npm-publish.js
index ee6ad133e6e046d94c151ee8194f6b603e47e180..9816bab6657808d68ee2fe09e40292f7fb2338b6 100644
--- a/npm-publish.js
+++ b/npm-publish.js
@@ -32,6 +32,15 @@ const PublishConfig = figgyPudding(
   }
 );
 
+function stripWorkspaceProtocolFromDeps(deps) {
+  if (!deps) return;
+  for (const [name, version] of Object.entries(deps)) {
+    if (version.startsWith("workspace:")) {
+      delete deps[name];
+    }
+  }
+}
+
 function npmPublish(pkg, tarFilePath, _opts, otpCache) {
   const { scope } = npa(pkg.name);
   // pass only the package scope to libnpmpublish
@@ -52,7 +61,10 @@ function npmPublish(pkg, tarFilePath, _opts, otpCache) {
         manifestLocation = path.join(pkg.contents, "package.json");
       }
 
-      return Promise.all([fs.readFile(tarFilePath), readJSONAsync(manifestLocation)]);
+      return Promise.all([
+        fs.readFile(tarFilePath),
+        readJSONAsync(manifestLocation),
+      ]);
     });
     chain = chain.then(([tarData, manifest]) => {
       // non-default tag needs to override publishConfig.tag,
@@ -67,7 +79,15 @@ function npmPublish(pkg, tarFilePath, _opts, otpCache) {
         manifest.publishConfig.tag = opts.tag;
       }
 
-      return otplease(innerOpts => publish(manifest, tarData, innerOpts), opts, otpCache).catch(err => {
+      stripWorkspaceProtocolFromDeps(manifest.dependencies);
+      stripWorkspaceProtocolFromDeps(manifest.peerDependencies);
+      stripWorkspaceProtocolFromDeps(manifest.devDependencies);
+
+      return otplease(
+        (innerOpts) => publish(manifest, tarData, innerOpts),
+        opts,
+        otpCache
+      ).catch((err) => {
         opts.log.silly("", err);
         opts.log.error(err.code, (err.body && err.body.error) || err.message);
 
